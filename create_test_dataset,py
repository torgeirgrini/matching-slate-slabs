#%%
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon

def generate_irregular_polygon(dim=(100, 100), vertices=10, perturb_strength=0.5):
    """
    Generate an irregular polygon.

    :param dim: tuple, dimensions of the canvas.
    :param vertices: int, number of vertices for the polygon.
    :param perturb_strength: float, strength of perturbation for irregularity.
    :return: Image of the irregular polygon.
    """
    # Generating the unit circle coordinates
    t = np.linspace(0, 2 * np.pi, vertices)
    x = np.cos(t)
    y = np.sin(t)

    # Perturb the circle points radially
    perturb = 1.0 + perturb_strength * (2 * np.random.rand(vertices) - 1.0)
    x *= perturb
    y *= perturb

    # Center and scale the polygon within the desired dimensions
    x = 0.5 * dim[0] * (x + 1)
    y = 0.5 * dim[1] * (y + 1)

    # Create a binary image of the polygon
    fig, ax = plt.subplots()
    ax.set_xlim(0, dim[0])
    ax.set_ylim(0, dim[1])
    ax.add_patch(Polygon(np.column_stack([x, y]), closed=True, color="black", rasterized=True))
    ax.set_aspect('equal', 'box')
    ax.axis('off')

    # Convert the figure to a numpy array
    fig.canvas.draw()
    data = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    img = data.reshape(fig.canvas.get_width_height()[::-1] + (3,)).astype(np.uint8)
    plt.close()

    return img[:, :, 0]

# Display 10 random polygons
fig, axs = plt.subplots(1, 10, figsize=(20, 2))
for i in range(10):
    polygon_img = generate_irregular_polygon(vertices=8)
    axs[i].imshow(polygon_img, cmap="gray")
    axs[i].axis('off')

plt.tight_layout()
plt.show()
#%%